local ____exports = {}
local on_resize
local druid = require("druid.druid")
function on_resize(data)
    local display_height = 960
    local window_aspect = data.width / data.height
    local display_width = tonumber(sys.get_config("display.width"))
    if display_width then
        local aspect = display_width / display_height
        local zoom = 1
        if window_aspect >= aspect then
            local height = display_width / window_aspect
            zoom = height / display_height
        end
        Camera.set_zoom(zoom)
    end
end
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    self.is_started = false
    gui.set_text(
        gui.get_node("description"),
        Lang.get_text("movie_description")
    )
    gui.set_text(
        gui.get_node("text"),
        Lang.get_text("play")
    )
    self.druid:new_button(
        "btn",
        function()
            gui.set_enabled(
                gui.get_node("window"),
                false
            )
            Scene.load("map")
        end
    )
    gui.set_text(
        gui.get_node("start_lable"),
        Lang.get_text("start")
    )
    self.druid:new_button(
        "start_button",
        function()
            self.is_started = true
            gui.set_enabled(
                gui.get_node("start_button"),
                false
            )
            EventBus.send("START_MOVIE")
        end
    )
    Camera.set_dynamic_orientation(false)
    Camera.set_go_prjection(-1, 0, -3, 3)
    EventBus.on("SYS_ON_RESIZED", on_resize)
    Camera.update_window_size()
    EventBus.on(
        "MOVIE_END",
        function()
            if not self.is_started then
                return
            end
            local window = gui.get_node("window")
            gui.set_enabled(window, true)
        end
    )
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    EventBus.off_all_current_script()
    Manager.final_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

