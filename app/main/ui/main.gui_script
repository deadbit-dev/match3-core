local ____exports = {}
local set_events, setup, setup_coins, setup_life, setup_store, is_enough_coins, set_enabled_coins, set_enabled_lifes, add_coins, remove_coins, add_lifes
local druid = require("druid.druid")
function set_events(data)
    EventBus.on(
        "ON_SCENE_LOADED",
        function(message)
            repeat
                local ____switch9 = message.name
                local ____cond9 = ____switch9 == "game"
                if ____cond9 then
                    set_enabled_coins(false)
                    set_enabled_lifes(false)
                    break
                end
                ____cond9 = ____cond9 or ____switch9 == "map"
                if ____cond9 then
                    set_enabled_coins(true)
                    set_enabled_lifes(true)
                    break
                end
            until true
        end,
        true
    )
end
function setup(data)
    setup_coins(data)
    setup_life(data)
    setup_store(data)
end
function setup_coins(data)
    data.druid:new_button(
        "coins/button",
        function()
            local store = gui.get_node("store/manager")
            gui.set_enabled(store, true)
        end
    )
    gui.set_text(
        gui.get_node("coins/text"),
        tostring(GameStorage.get("coins"))
    )
end
function setup_life(data)
    data.druid:new_button(
        "lifes/button",
        function()
            local store = gui.get_node("store/manager")
            gui.set_enabled(store, true)
        end
    )
    gui.set_text(
        gui.get_node("lifes/text"),
        tostring(GameStorage.get("lifes"))
    )
end
function setup_store(data)
    gui.set_render_order(1)
    data.druid:new_button(
        "store/close",
        function()
            local store = gui.get_node("store/manager")
            gui.set_enabled(store, false)
        end
    )
    data.druid:new_button(
        "store/buy_30_btn",
        function() return add_coins(30) end
    )
    data.druid:new_button(
        "store/buy_150_btn",
        function() return add_coins(150) end
    )
    data.druid:new_button(
        "store/buy_300_btn",
        function() return add_coins(300) end
    )
    data.druid:new_button(
        "store/buy_800_btn",
        function() return add_coins(800) end
    )
    data.druid:new_button(
        "store/buy_x1_btn",
        function()
            if not is_enough_coins(30) then
                return
            end
            add_lifes(1)
            remove_coins(30)
        end
    )
    data.druid:new_button(
        "store/buy_x2_btn",
        function()
            if not is_enough_coins(50) then
                return
            end
            add_lifes(2)
            remove_coins(50)
        end
    )
    data.druid:new_button(
        "store/buy_x3_btn",
        function()
            if not is_enough_coins(70) then
                return
            end
            add_lifes(3)
            remove_coins(70)
        end
    )
    data.druid:new_button(
        "store/junior_box/buy_button/button",
        function()
            if not is_enough_coins(90) then
                return
            end
            remove_coins(90)
            add_coins(150)
            GameStorage.set(
                "hammer_counts",
                GameStorage.get("hammer_counts") + 1
            )
            GameStorage.set(
                "spinning_counts",
                GameStorage.get("spinning_counts") + 1
            )
            GameStorage.set(
                "horizontal_rocket_counts",
                GameStorage.get("horizontal_rocket_counts") + 1
            )
            GameStorage.set(
                "vertical_rocket_counts",
                GameStorage.get("vertical_rocket_counts") + 1
            )
        end
    )
    data.druid:new_button(
        "store/junior_box/buy_button/button",
        function()
            if not is_enough_coins(180) then
                return
            end
            remove_coins(180)
            add_coins(300)
            GameStorage.set(
                "hammer_counts",
                GameStorage.get("hammer_counts") + 2
            )
            GameStorage.set(
                "spinning_counts",
                GameStorage.get("spinning_counts") + 2
            )
            GameStorage.set(
                "horizontal_rocket_counts",
                GameStorage.get("horizontal_rocket_counts") + 2
            )
            GameStorage.set(
                "vertical_rocket_counts",
                GameStorage.get("vertical_rocket_counts") + 2
            )
        end
    )
    data.druid:new_button(
        "store/buy_ad_1_btn",
        function()
            if not is_enough_coins(100) then
                return
            end
            remove_coins(100)
        end
    )
    data.druid:new_button(
        "store/buy_ad_7_btn",
        function()
            if not is_enough_coins(250) then
                return
            end
            remove_coins(250)
        end
    )
    data.druid:new_button(
        "store/buy_ad_30_btn",
        function()
            if not is_enough_coins(600) then
                return
            end
            remove_coins(600)
        end
    )
end
function is_enough_coins(amount)
    return GameStorage.get("coins") >= amount
end
function set_enabled_coins(state)
    local coins = gui.get_node("coins/button")
    gui.set_enabled(coins, state)
end
function set_enabled_lifes(state)
    local coins = gui.get_node("lifes/button")
    gui.set_enabled(coins, state)
end
function add_coins(amount)
    local coins = GameStorage.get("coins")
    coins = math.max(coins + amount, 10000)
    local coins_text = gui.get_node("coins/text")
    gui.set_text(
        coins_text,
        tostring(coins)
    )
    GameStorage.set("coins", coins)
end
function remove_coins(amount)
    local coins = GameStorage.get("coins")
    coins = coins - amount
    local coins_text = gui.get_node("coins/text")
    gui.set_text(
        coins_text,
        tostring(coins)
    )
    GameStorage.set("coins", coins)
end
function add_lifes(amount)
    local lifes = GameStorage.get("lifes")
    lifes = lifes + amount
    local lifes_text = gui.get_node("lifes/text")
    gui.set_text(
        lifes_text,
        tostring(lifes)
    )
    GameStorage.set("lifes", lifes)
end
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    setup(self)
    set_events(self)
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    EventBus.off_all_current_script()
    Manager.final_script()
end
local function remove_lifes(amount)
    local lifes = GameStorage.get("lifes")
    lifes = lifes - amount
    local lifes_text = gui.get_node("lifes/text")
    gui.set_text(
        lifes_text,
        tostring(lifes)
    )
    GameStorage.set("lifes", lifes)
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

