local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local setup, setup_info_ui, setup_step_or_time, setup_targets, setup_busters, setup_sustem_ui, setup_win_ui, next_level, setup_gameover_ui, restart_level, set_events, update_targets, update_buttons, set_tutorial, set_win, set_gameover, disable_game_ui
local druid = require("druid.druid")
local ____utils = require("utils.utils")
local parse_time = ____utils.parse_time
local set_text = ____utils.set_text
local set_text_colors = ____utils.set_text_colors
function setup(data)
    setup_info_ui(data)
    setup_busters(data)
    setup_sustem_ui(data)
    setup_win_ui(data)
    setup_gameover_ui(data)
end
function setup_info_ui(data)
    setup_step_or_time(data)
    setup_targets(data)
end
function setup_step_or_time(data)
    if data.level.time ~= nil then
        local node = gui.get_node("timer")
        gui.set_enabled(node, true)
        if data.level.steps == nil then
            gui.set_position(
                node,
                vmath.vector3(0, -20, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.6, 0.6, 1)
            )
        else
            gui.set_position(
                node,
                vmath.vector3(0, -5, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.5, 0.5, 1)
            )
        end
        set_text(
            "time",
            parse_time(data.level.time)
        )
    end
    if data.level.steps ~= nil then
        local node = gui.get_node("step_counter")
        gui.set_enabled(node, true)
        if data.level.time == nil then
            gui.set_position(
                node,
                vmath.vector3(0, -25, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.7, 0.7, 1)
            )
        else
            gui.set_position(
                node,
                vmath.vector3(0, -45, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.5, 0.5, 1)
            )
        end
        set_text("steps", data.level.steps)
    end
end
function setup_targets(data)
    local targets = data.level.targets
    if targets[1] ~= nil then
        local node = gui.get_node("first_target")
        gui.set_enabled(node, true)
        repeat
            local ____switch18 = #targets
            local ____cond18 = ____switch18 == 1
            if ____cond18 then
                gui.set_position(
                    node,
                    vmath.vector3(0, -15, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
            ____cond18 = ____cond18 or ____switch18 == 2
            if ____cond18 then
                gui.set_position(
                    node,
                    vmath.vector3(-35, -15, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
            ____cond18 = ____cond18 or ____switch18 == 3
            if ____cond18 then
                gui.set_position(
                    node,
                    vmath.vector3(-45, -5, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.3, 0.3, 1)
                )
                break
            end
        until true
        local target = targets[1]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("first_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("first_target_counts", target.count)
    end
    if targets[2] ~= nil then
        local node = gui.get_node("second_target")
        gui.set_enabled(node, true)
        repeat
            local ____switch20 = #targets
            local ____cond20 = ____switch20 == 2
            if ____cond20 then
                gui.set_position(
                    node,
                    vmath.vector3(25, -15, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
            ____cond20 = ____cond20 or ____switch20 == 3
            if ____cond20 then
                gui.set_position(
                    node,
                    vmath.vector3(36, -5, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.3, 0.3, 1)
                )
                break
            end
        until true
        local target = targets[2]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("second_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("second_target_counts", target.count)
    end
    if targets[3] ~= nil then
        local node = gui.get_node("third_target")
        gui.set_enabled(node, true)
        gui.set_position(
            node,
            vmath.vector3(-2, -36, 0)
        )
        gui.set_scale(
            node,
            vmath.vector3(0.3, 0.3, 1)
        )
        local target = targets[3]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("third_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("third_target_counts", target.count)
    end
end
function setup_busters(data)
    if __TS__ArrayIncludes(
        GAME_CONFIG.animal_levels,
        GameStorage.get("current_level") + 1
    ) then
        return
    end
    gui.set_enabled(
        gui.get_node("buster_buttons"),
        true
    )
    if GameStorage.get("spinning_opened") then
        data.druid:new_button(
            "spinning/button",
            function()
                EventBus.send("TRY_ACTIVATE_SPINNING")
            end
        )
        gui.set_enabled(
            gui.get_node("spinning/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("spinning/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("spinning/counts"),
            true
        )
    end
    if GameStorage.get("hammer_opened") then
        data.druid:new_button(
            "hammer/button",
            function()
                EventBus.send("TRY_ACTIVATE_HAMMER")
            end
        )
        gui.set_enabled(
            gui.get_node("hammer/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("hammer/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("hammer/counts"),
            true
        )
    end
    if GameStorage.get("horizontal_rocket_opened") then
        data.druid:new_button(
            "horizontal_rocket/button",
            function()
                EventBus.send("TRY_ACTIVATE_HORIZONTAL_ROCKET")
            end
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/counts"),
            true
        )
    end
    if GameStorage.get("vertical_rocket_opened") then
        data.druid:new_button(
            "vertical_rocket/button",
            function()
                EventBus.send("TRY_ACTIVATE_VERTICAL_ROCKET")
            end
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/counts"),
            true
        )
    end
end
function setup_sustem_ui(data)
    data.druid:new_button(
        "back/button",
        function() return Scene.load("map") end
    )
    data.druid:new_button(
        "restart/button",
        function() return Scene.restart() end
    )
    data.druid:new_button(
        "revert_step/button",
        function() return EventBus.send("TRY_REVERT_STEP") end
    )
    set_text(
        "current_level_text",
        GameStorage.get("current_level") + 1
    )
end
function setup_win_ui(data)
    data.druid:new_button("continue_button", next_level)
    gui.set_enabled(
        gui.get_node("win"),
        false
    )
end
function next_level()
    GameStorage.set(
        "current_level",
        GameStorage.get("current_level") + 1
    )
    Scene.restart()
end
function setup_gameover_ui(data)
    data.druid:new_button("restart_button", restart_level)
    data.druid:new_button(
        "map_button",
        function() return Scene.load("map") end
    )
    gui.set_enabled(
        gui.get_node("gameover"),
        false
    )
end
function restart_level()
    Scene.restart()
end
function set_events(data)
    EventBus.on(
        "INIT_UI",
        function() return setup(data) end
    )
    EventBus.on(
        "UPDATED_STEP_COUNTER",
        function(steps) return set_text("steps", steps) end,
        true
    )
    EventBus.on(
        "UPDATED_TARGET",
        function(data) return update_targets(data) end,
        true
    )
    EventBus.on(
        "UPDATED_BUTTONS",
        function() return update_buttons(data) end,
        true
    )
    EventBus.on(
        "GAME_TIMER",
        function(time) return set_text(
            "time",
            parse_time(time)
        ) end,
        true
    )
    EventBus.on(
        "SET_TUTORIAL",
        function() return set_tutorial() end,
        true
    )
    EventBus.on(
        "REMOVE_TUTORIAL",
        function() return gui.set_enabled(
            gui.get_node("tutorial"),
            false
        ) end,
        true
    )
    EventBus.on("ON_WIN", set_win, true)
    EventBus.on("ON_GAME_OVER", set_gameover, true)
end
function update_targets(data)
    repeat
        local ____switch50 = data.id
        local ____cond50 = ____switch50 == 0
        if ____cond50 then
            set_text("first_target_counts", data.count)
            break
        end
        ____cond50 = ____cond50 or ____switch50 == 1
        if ____cond50 then
            set_text("second_target_counts", data.count)
            break
        end
        ____cond50 = ____cond50 or ____switch50 == 2
        if ____cond50 then
            set_text("third_target_counts", data.count)
            break
        end
    until true
end
function update_buttons(data)
    set_text_colors({"spinning/button"}, "#fff", data.busters.spinning.active and 0.5 or 1)
    set_text(
        "spinning/counts",
        GameStorage.get("spinning_counts")
    )
    set_text_colors({"hammer/button"}, "#fff", data.busters.hammer.active and 0.5 or 1)
    set_text(
        "hammer/counts",
        GameStorage.get("hammer_counts")
    )
    set_text_colors({"horizontal_rocket/button"}, "#fff", data.busters.horizontal_rocket.active and 0.5 or 1)
    set_text(
        "horizontal_rocket/counts",
        GameStorage.get("horizontal_rocket_counts")
    )
    set_text_colors({"vertical_rocket/button"}, "#fff", data.busters.vertical_rocket.active and 0.5 or 1)
    set_text(
        "vertical_rocket/counts",
        GameStorage.get("vertical_rocket_counts")
    )
end
function set_tutorial()
    local tutorial_data = GAME_CONFIG.tutorials_data[GameStorage.get("current_level") + 1]
    local tutorial = gui.get_node("tutorial")
    gui.set_position(tutorial, tutorial_data.position)
    gui.set_enabled(tutorial, true)
    gui.set_text(
        gui.get_node("tutorial_text"),
        Lang.get_text(tutorial_data.text)
    )
end
function set_win()
    disable_game_ui()
    gui.set_enabled(
        gui.get_node("win"),
        true
    )
end
function set_gameover()
    disable_game_ui()
    gui.set_enabled(
        gui.get_node("gameover"),
        true
    )
end
function disable_game_ui()
    gui.set_enabled(
        gui.get_node("substrate"),
        false
    )
    gui.set_enabled(
        gui.get_node("buster_buttons"),
        false
    )
    gui.set_enabled(
        gui.get_node("system_buttons"),
        false
    )
end
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    self.level = GAME_CONFIG.levels[GameStorage.get("current_level") + 1]
    self.busters = self.level.busters
    set_events(self)
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    EventBus.off_all_current_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

