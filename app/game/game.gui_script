local ____exports = {}
local druid = require("druid.druid")
local ____utils = require("utils.utils")
local set_text = ____utils.set_text
local set_text_colors = ____utils.set_text_colors
function ____exports.init(self)
    Manager.init_gui()
    self.druid = druid.new(self)
    self.busters = GAME_CONFIG.levels[GameStorage.get("current_level") + 1].busters
    set_text(
        "current_level",
        GameStorage.get("current_level")
    )
    self.druid:new_button(
        "previous_level_button",
        function()
            local previous_level = GameStorage.get("current_level") - 1
            if previous_level < 0 then
                return
            end
            GameStorage.set("current_level", previous_level)
            Scene.restart()
        end
    )
    self.druid:new_button(
        "next_level_button",
        function()
            local next_level = GameStorage.get("current_level") + 1
            if next_level >= #GAME_CONFIG.levels then
                return
            end
            GameStorage.set("current_level", next_level)
            Scene.restart()
        end
    )
    self.druid:new_button(
        "restart_button",
        function() return Scene.restart() end
    )
    self.druid:new_button(
        "revert_step_button",
        function() return EventBus.send("TRY_REVERT_STEP") end
    )
    self.druid:new_button(
        "hammer_button",
        function()
            if GameStorage.get("hammer_counts") > 0 then
                self.busters.hammer_active = not self.busters.hammer_active
            end
            set_text_colors({"hammer_button"}, "#fff", self.busters.hammer_active and 0.5 or 1)
            set_text(
                "hammer_counts",
                GameStorage.get("hammer_counts")
            )
        end
    )
    EventBus.on(
        "UPDATED_HAMMER",
        function()
            set_text_colors({"hammer_button"}, "#fff", self.busters.hammer_active and 0.5 or 1)
            set_text(
                "hammer_counts",
                GameStorage.get("hammer_counts")
            )
        end
    )
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message_gui(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    EventBus.off_all_current_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

