local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local __TS__ArrayIsArray = ____lualib.__TS__ArrayIsArray
local ____exports = {}
local setup, setup_info_ui, setup_step_or_time, setup_targets, setup_busters, setup_sustem_ui, setup_win_ui, next_level, setup_gameover_ui, set_events, update_targets, update_buttons, set_tutorial, set_win, set_gameover, set_gameover_offer, disabled_gameover_offer, disable_game_ui
local druid = require("druid.druid")
local ____coins = require("main.coins")
local is_enough_coins = ____coins.is_enough_coins
local remove_coins = ____coins.remove_coins
local ____life = require("main.life")
local remove_lifes = ____life.remove_lifes
local ____utils = require("utils.utils")
local parse_time = ____utils.parse_time
local set_text = ____utils.set_text
local set_text_colors = ____utils.set_text_colors
function setup(instance)
    setup_info_ui(instance)
    setup_busters(instance)
    setup_sustem_ui(instance)
    setup_win_ui(instance)
    setup_gameover_ui(instance)
end
function setup_info_ui(instance)
    setup_step_or_time(instance)
    setup_targets(instance)
end
function setup_step_or_time(instance)
    if instance.level.time ~= nil then
        local node = gui.get_node("timer")
        gui.set_enabled(node, true)
        if instance.level.steps == nil then
            gui.set_position(
                node,
                vmath.vector3(0, 0, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(1, 1, 1)
            )
        else
            gui.set_position(
                node,
                vmath.vector3(0, 0, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(1, 1, 1)
            )
        end
        set_text(
            "time",
            parse_time(instance.level.time)
        )
        gui.set_text(
            gui.get_node("step_time_box/text"),
            Lang.get_text("time")
        )
    end
    if instance.level.steps ~= nil then
        local node = gui.get_node("step_counter")
        gui.set_enabled(node, true)
        if instance.level.time == nil then
            gui.set_position(
                node,
                vmath.vector3(0, 0, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(1, 1, 1)
            )
        else
            gui.set_position(
                node,
                vmath.vector3(0, 0, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(1, 1, 1)
            )
        end
        set_text("steps", instance.level.steps)
        gui.set_text(
            gui.get_node("step_time_box/text"),
            Lang.get_text("steps")
        )
    end
end
function setup_targets(instance)
    local targets = instance.level.targets
    if targets[1] ~= nil then
        local node = gui.get_node("first_target")
        gui.set_enabled(node, true)
        repeat
            local ____switch18 = #targets
            local ____cond18 = ____switch18 == 1
            if ____cond18 then
                gui.set_position(
                    node,
                    vmath.vector3(0, 0, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.5, 0.5, 1)
                )
                break
            end
            ____cond18 = ____cond18 or ____switch18 == 2
            if ____cond18 then
                gui.set_position(
                    node,
                    vmath.vector3(-40, 0, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.5, 0.5, 1)
                )
                break
            end
            ____cond18 = ____cond18 or ____switch18 == 3
            if ____cond18 then
                gui.set_position(
                    node,
                    vmath.vector3(-35, 20, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
        until true
        local target = targets[1]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("first_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("first_target_counts", target.count)
    end
    if targets[2] ~= nil then
        local node = gui.get_node("second_target")
        gui.set_enabled(node, true)
        repeat
            local ____switch20 = #targets
            local ____cond20 = ____switch20 == 2
            if ____cond20 then
                gui.set_position(
                    node,
                    vmath.vector3(40, 0, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.5, 0.5, 1)
                )
                break
            end
            ____cond20 = ____cond20 or ____switch20 == 3
            if ____cond20 then
                gui.set_position(
                    node,
                    vmath.vector3(35, 20, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
        until true
        local target = targets[2]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("second_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("second_target_counts", target.count)
    end
    if targets[3] ~= nil then
        local node = gui.get_node("third_target")
        gui.set_enabled(node, true)
        gui.set_position(
            node,
            vmath.vector3(0, -35, 0)
        )
        gui.set_scale(
            node,
            vmath.vector3(0.4, 0.4, 1)
        )
        local target = targets[3]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("third_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("third_target_counts", target.count)
    end
    gui.set_text(
        gui.get_node("targets_box/text"),
        Lang.get_text("targets")
    )
end
function setup_busters(instance)
    if __TS__ArrayIncludes(
        GAME_CONFIG.animal_levels,
        GameStorage.get("current_level") + 1
    ) then
        return
    end
    gui.set_enabled(
        gui.get_node("buster_buttons"),
        true
    )
    if GameStorage.get("spinning_opened") then
        instance.druid:new_button(
            "spinning/button",
            function()
                if GameStorage.get("spinning_counts") == 0 then
                    return EventBus.send("TRY_BUY_SPINNING")
                end
                EventBus.send("TRY_ACTIVATE_SPINNING")
            end
        )
        gui.set_enabled(
            gui.get_node("spinning/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("spinning/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("spinning/counts"),
            true
        )
    end
    if GameStorage.get("hammer_opened") then
        instance.druid:new_button(
            "hammer/button",
            function()
                if GameStorage.get("hammer_counts") == 0 then
                    return EventBus.send("TRY_BUY_HAMMER")
                end
                EventBus.send("TRY_ACTIVATE_HAMMER")
            end
        )
        gui.set_enabled(
            gui.get_node("hammer/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("hammer/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("hammer/counts"),
            true
        )
    end
    if GameStorage.get("horizontal_rocket_opened") then
        instance.druid:new_button(
            "horizontal_rocket/button",
            function()
                if GameStorage.get("horizontal_rocket_counts") == 0 then
                    return EventBus.send("TRY_BUY_HORIZONTAL_ROCKET")
                end
                EventBus.send("TRY_ACTIVATE_HORIZONTAL_ROCKET")
            end
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/counts"),
            true
        )
    end
    if GameStorage.get("vertical_rocket_opened") then
        instance.druid:new_button(
            "vertical_rocket/button",
            function()
                if GameStorage.get("vertical_rocket_counts") == 0 then
                    return EventBus.send("TRY_BUY_VERTICAL_ROCKET")
                end
                EventBus.send("TRY_ACTIVATE_VERTICAL_ROCKET")
            end
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/counts"),
            true
        )
    end
    update_buttons(instance)
end
function setup_sustem_ui(instance)
    instance.druid:new_button(
        "back/button",
        function() return Scene.load("map") end
    )
    instance.druid:new_button(
        "restart/button",
        function() return Scene.restart() end
    )
    instance.druid:new_button(
        "revert_step/button",
        function() return EventBus.send("TRY_REVERT_STEP") end
    )
    set_text(
        "current_level",
        ("Уровень " .. tostring(GameStorage.get("current_level"))) .. 1
    )
end
function setup_win_ui(instance)
    instance.druid:new_button("continue_button", next_level)
    gui.set_enabled(
        gui.get_node("win"),
        false
    )
    gui.set_text(
        gui.get_node("win_text"),
        Lang.get_text("win_title")
    )
    gui.set_text(
        gui.get_node("continue_text"),
        Lang.get_text("continue")
    )
end
function next_level()
    GameStorage.set(
        "current_level",
        GameStorage.get("current_level") + 1
    )
    Scene.restart()
end
function setup_gameover_ui(instance)
    gui.set_text(
        gui.get_node("gameover_text"),
        Lang.get_text("gameover_title")
    )
    gui.set_text(
        gui.get_node("restart_text"),
        Lang.get_text("restart")
    )
    instance.druid:new_button(
        "restart_button",
        function()
            if not GameStorage.get("infinit_life").is_active and GameStorage.get("life").amount == 0 then
                EventBus.send("SET_LIFE_NOTIFICATION")
                return
            end
            Scene.restart()
        end
    )
    gui.set_text(
        gui.get_node("map_text"),
        Lang.get_text("map")
    )
    instance.druid:new_button(
        "map_button",
        function() return Scene.load("map") end
    )
    instance.druid:new_button(
        "gameover_close",
        function() return Scene.load("map") end
    )
    instance.druid:new_button("gameover_offer_close", disabled_gameover_offer)
    gui.set_text(
        gui.get_node("steps_by_ad/text"),
        "+3 хода"
    )
    instance.druid:new_button(
        "steps_by_ad/button",
        function() return EventBus.send("REVIVE", 3) end
    )
    gui.set_text(
        gui.get_node("steps_by_coins/text"),
        "+5 ходов         500"
    )
    instance.druid:new_button(
        "steps_by_coins/button",
        function()
            if not is_enough_coins(500) then
                return
            end
            remove_coins(500)
            EventBus.send("REVIVE", 5)
        end
    )
end
function set_events(instance)
    EventBus.on(
        "INIT_UI",
        function() return setup(instance) end
    )
    EventBus.on(
        "UPDATED_STEP_COUNTER",
        function(steps) return set_text("steps", steps) end,
        true
    )
    EventBus.on(
        "UPDATED_TARGET",
        function(data) return update_targets(data) end,
        true
    )
    EventBus.on(
        "UPDATED_BUTTONS",
        function() return update_buttons(instance) end,
        true
    )
    EventBus.on(
        "GAME_TIMER",
        function(time) return set_text(
            "time",
            parse_time(time)
        ) end,
        true
    )
    EventBus.on(
        "SET_TUTORIAL",
        function() return set_tutorial() end,
        true
    )
    EventBus.on(
        "REMOVE_TUTORIAL",
        function() return gui.set_enabled(
            gui.get_node("tutorial"),
            false
        ) end,
        true
    )
    EventBus.on("ON_WIN", set_win, true)
    EventBus.on(
        "ON_GAME_OVER",
        function(state) return set_gameover(instance, state) end,
        true
    )
end
function update_targets(data)
    repeat
        local ____switch60 = data.id
        local ____cond60 = ____switch60 == 0
        if ____cond60 then
            set_text(
                "first_target_counts",
                math.max(0, data.count)
            )
            break
        end
        ____cond60 = ____cond60 or ____switch60 == 1
        if ____cond60 then
            set_text(
                "second_target_counts",
                math.max(0, data.count)
            )
            break
        end
        ____cond60 = ____cond60 or ____switch60 == 2
        if ____cond60 then
            set_text(
                "third_target_counts",
                math.max(0, data.count)
            )
            break
        end
    until true
end
function update_buttons(instance)
    local spinning = GameStorage.get("spinning_counts")
    set_text("spinning/counts", spinning == 0 and "+" or spinning)
    set_text_colors({"spinning/button"}, "#fff", instance.busters.spinning.active and 0.5 or 1)
    local hammer = GameStorage.get("hammer_counts")
    set_text("hammer/counts", hammer == 0 and "+" or hammer)
    set_text_colors({"hammer/button"}, "#fff", instance.busters.hammer.active and 0.5 or 1)
    local horizontal_rocket = GameStorage.get("horizontal_rocket_counts")
    set_text("horizontal_rocket/counts", horizontal_rocket == 0 and "+" or horizontal_rocket)
    set_text_colors({"horizontal_rocket/button"}, "#fff", instance.busters.horizontal_rocket.active and 0.5 or 1)
    local vertical_rocket = GameStorage.get("vertical_rocket_counts")
    set_text("vertical_rocket/counts", vertical_rocket == 0 and "+" or vertical_rocket)
    set_text_colors({"vertical_rocket/button"}, "#fff", instance.busters.vertical_rocket.active and 0.5 or 1)
end
function set_tutorial()
    local tutorial_data = GAME_CONFIG.tutorials_data[GameStorage.get("current_level") + 1]
    local tutorial = gui.get_node("tutorial")
    local tutorial_text = gui.get_node("tutorial_text")
    gui.set_position(tutorial_text, tutorial_data.position)
    gui.set_text(
        tutorial_text,
        Lang.get_text(tutorial_data.text)
    )
    gui.set_enabled(tutorial, true)
    if tutorial_data.busters ~= nil then
        local busters = __TS__ArrayIsArray(tutorial_data.busters) and tutorial_data.busters or ({tutorial_data.busters})
        for ____, buster in ipairs(busters) do
            gui.set_layer(
                gui.get_node(buster .. "/button"),
                "top"
            )
        end
    end
end
function set_win()
    disable_game_ui()
    gui.set_enabled(
        gui.get_node("win"),
        true
    )
    local anim_props = {blend_duration = 0, playback_rate = 1}
    gui.play_spine_anim(
        gui.get_node("firework"),
        hash("firework"),
        go.PLAYBACK_ONCE_FORWARD,
        anim_props,
        function() return print("END") end
    )
end
function set_gameover(instance, state)
    disable_game_ui()
    gui.set_enabled(
        gui.get_node("gameover"),
        true
    )
    gui.set_enabled(
        gui.get_node("missing_targets"),
        true
    )
    local target_1 = gui.get_node("target_1")
    local target_2 = gui.get_node("target_2")
    local target_3 = gui.get_node("target_3")
    if #state.targets == 1 then
        local target1 = state.targets[1]
        local view1 = target1.is_cell and GAME_CONFIG.cell_view[target1.type] or GAME_CONFIG.element_view[target1.type]
        gui.play_flipbook(
            gui.get_node("target_1"),
            view1 == "cell_web" and view1 .. "_ui" or view1
        )
        gui.set_text(
            gui.get_node("target_1_text"),
            tostring((tostring(#target1.uids) .. "/") .. tostring(target1.count))
        )
        gui.set_enabled(
            gui.get_node("target_1_fail_icon"),
            #target1.uids < target1.count
        )
        gui.set_position(
            target_1,
            vmath.vector3(0, 0, 0)
        )
        gui.set_enabled(target_1, true)
    elseif #state.targets == 2 then
        local target1 = state.targets[1]
        local view1 = target1.is_cell and GAME_CONFIG.cell_view[target1.type] or GAME_CONFIG.element_view[target1.type]
        gui.play_flipbook(
            gui.get_node("target_1"),
            view1 == "cell_web" and view1 .. "_ui" or view1
        )
        gui.set_text(
            gui.get_node("target_1_text"),
            tostring((tostring(#target1.uids) .. "/") .. tostring(target1.count))
        )
        gui.set_enabled(
            gui.get_node("target_1_fail_icon"),
            #target1.uids < target1.count
        )
        gui.set_position(
            target_1,
            vmath.vector3(-70, 0, 0)
        )
        gui.set_enabled(target_1, true)
        local target2 = state.targets[2]
        local view2 = target2.is_cell and GAME_CONFIG.cell_view[target2.type] or GAME_CONFIG.element_view[target2.type]
        gui.play_flipbook(
            gui.get_node("target_2"),
            view2 == "cell_web" and view2 .. "_ui" or view2
        )
        gui.set_text(
            gui.get_node("target_2_text"),
            tostring((tostring(#target2.uids) .. "/") .. tostring(target2.count))
        )
        gui.set_enabled(
            gui.get_node("target_2_fail_icon"),
            #target2.uids < target2.count
        )
        gui.set_position(
            target_2,
            vmath.vector3(70, 0, 0)
        )
        gui.set_enabled(target_2, true)
    elseif #state.targets == 3 then
        local target1 = state.targets[1]
        local view1 = target1.is_cell and GAME_CONFIG.cell_view[target1.type] or GAME_CONFIG.element_view[target1.type]
        gui.play_flipbook(
            gui.get_node("target_1"),
            view1 == "cell_web" and view1 .. "_ui" or view1
        )
        gui.set_text(
            gui.get_node("target_1_text"),
            tostring((tostring(#target1.uids) .. "/") .. tostring(target1.count))
        )
        gui.set_enabled(
            gui.get_node("target_1_fail_icon"),
            #target1.uids < target1.count
        )
        gui.set_position(
            target_1,
            vmath.vector3(-125, 0, 0)
        )
        gui.set_enabled(target_1, true)
        local target2 = state.targets[2]
        local view2 = target2.is_cell and GAME_CONFIG.cell_view[target2.type] or GAME_CONFIG.element_view[target2.type]
        gui.play_flipbook(
            gui.get_node("target_2"),
            view2 == "cell_web" and view2 .. "_ui" or view2
        )
        gui.set_text(
            gui.get_node("target_2_text"),
            tostring((tostring(#target2.uids) .. "/") .. tostring(target2.count))
        )
        gui.set_enabled(
            gui.get_node("target_2_fail_icon"),
            #target2.uids < target2.count
        )
        gui.set_position(
            target_2,
            vmath.vector3(0, 0, 0)
        )
        gui.set_enabled(target_2, true)
        local target3 = state.targets[3]
        local view3 = target3.is_cell and GAME_CONFIG.cell_view[target3.type] or GAME_CONFIG.element_view[target3.type]
        gui.play_flipbook(
            gui.get_node("target_3"),
            view3 == "cell_web" and view3 .. "_ui" or view3
        )
        gui.set_text(
            gui.get_node("target_3_text"),
            tostring((tostring(#target3.uids) .. "/") .. tostring(target3.count))
        )
        gui.set_enabled(
            gui.get_node("target_3_fail_icon"),
            #target3.uids < target3.count
        )
        gui.set_position(
            target_3,
            vmath.vector3(125, 0, 0)
        )
        gui.set_enabled(target_3, true)
    end
    if instance.level.steps ~= nil then
        set_gameover_offer()
    else
        disabled_gameover_offer()
    end
end
function set_gameover_offer()
    gui.set_enabled(
        gui.get_node("gameover_offer_close"),
        true
    )
    gui.set_enabled(
        gui.get_node("steps_by_ad/button"),
        true
    )
    gui.set_enabled(
        gui.get_node("steps_by_coins/button"),
        true
    )
end
function disabled_gameover_offer()
    remove_lifes(1)
    gui.set_enabled(
        gui.get_node("damage"),
        false
    )
    gui.set_enabled(
        gui.get_node("gameover_offer_close"),
        false
    )
    gui.set_enabled(
        gui.get_node("steps_by_ad/button"),
        false
    )
    gui.set_enabled(
        gui.get_node("steps_by_coins/button"),
        false
    )
    gui.set_enabled(
        gui.get_node("gameover_close"),
        true
    )
    gui.set_enabled(
        gui.get_node("restart_button"),
        true
    )
    gui.set_enabled(
        gui.get_node("map_button"),
        true
    )
end
function disable_game_ui()
    gui.set_enabled(
        gui.get_node("substrate"),
        false
    )
    gui.set_enabled(
        gui.get_node("buster_buttons"),
        false
    )
    gui.set_enabled(
        gui.get_node("system_buttons"),
        false
    )
end
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    self.level = GAME_CONFIG.levels[GameStorage.get("current_level") + 1]
    self.busters = self.level.busters
    set_events(self)
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    Manager.final_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

