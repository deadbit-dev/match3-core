local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local druid = require("druid.druid")
local ____utils = require("utils.utils")
local parse_time = ____utils.parse_time
local set_text = ____utils.set_text
local set_text_colors = ____utils.set_text_colors
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    self.level = GAME_CONFIG.levels[GameStorage.get("current_level") + 1]
    self.busters = self.level.busters
    if self.level.time ~= nil then
        local node = gui.get_node("timer")
        gui.set_enabled(node, true)
        if self.level.steps == nil then
            gui.set_position(
                node,
                vmath.vector3(0, -20, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.6, 0.6, 1)
            )
        else
            gui.set_position(
                node,
                vmath.vector3(0, -5, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.5, 0.5, 1)
            )
        end
        set_text(
            "time",
            parse_time(self.level.time)
        )
    end
    if self.level.steps ~= nil then
        local node = gui.get_node("step_counter")
        gui.set_enabled(node, true)
        if self.level.time == nil then
            gui.set_position(
                node,
                vmath.vector3(0, -25, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.7, 0.7, 1)
            )
        else
            gui.set_position(
                node,
                vmath.vector3(0, -45, 0)
            )
            gui.set_scale(
                node,
                vmath.vector3(0.5, 0.5, 1)
            )
        end
        set_text("steps", self.level.steps)
    end
    local targets = self.level.targets
    if targets[1] ~= nil then
        local node = gui.get_node("first_target")
        gui.set_enabled(node, true)
        repeat
            local ____switch10 = #targets
            local ____cond10 = ____switch10 == 1
            if ____cond10 then
                gui.set_position(
                    node,
                    vmath.vector3(0, -15, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
            ____cond10 = ____cond10 or ____switch10 == 2
            if ____cond10 then
                gui.set_position(
                    node,
                    vmath.vector3(-35, -15, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
            ____cond10 = ____cond10 or ____switch10 == 3
            if ____cond10 then
                gui.set_position(
                    node,
                    vmath.vector3(-45, -5, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.3, 0.3, 1)
                )
                break
            end
        until true
        local target = targets[1]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("first_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("first_target_counts", target.count)
    end
    if targets[2] ~= nil then
        local node = gui.get_node("second_target")
        gui.set_enabled(node, true)
        repeat
            local ____switch12 = #targets
            local ____cond12 = ____switch12 == 2
            if ____cond12 then
                gui.set_position(
                    node,
                    vmath.vector3(25, -15, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.4, 0.4, 1)
                )
                break
            end
            ____cond12 = ____cond12 or ____switch12 == 3
            if ____cond12 then
                gui.set_position(
                    node,
                    vmath.vector3(36, -5, 0)
                )
                gui.set_scale(
                    node,
                    vmath.vector3(0.3, 0.3, 1)
                )
                break
            end
        until true
        local target = targets[2]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("second_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("second_target_counts", target.count)
    end
    if targets[3] ~= nil then
        local node = gui.get_node("third_target")
        gui.set_enabled(node, true)
        gui.set_position(
            node,
            vmath.vector3(-2, -36, 0)
        )
        gui.set_scale(
            node,
            vmath.vector3(0.3, 0.3, 1)
        )
        local target = targets[3]
        local view = target.is_cell and GAME_CONFIG.cell_view[target.type] or GAME_CONFIG.element_view[target.type]
        gui.play_flipbook(
            gui.get_node("third_target_icon"),
            view == "cell_web" and view .. "_ui" or view
        )
        set_text("third_target_counts", target.count)
    end
    self.druid:new_button(
        "back_button",
        function()
            Scene.load("map")
        end
    )
    set_text(
        "current_level",
        GameStorage.get("current_level") + 1
    )
    self.druid:new_button(
        "restart_button",
        function() return Scene.restart() end
    )
    self.druid:new_button(
        "revert_step_button",
        function() return EventBus.send("TRY_REVERT_STEP") end
    )
    if GameStorage.get("spinning_opened") then
        self.druid:new_button(
            "spinning/button",
            function()
                if GameStorage.get("spinning_counts") > 0 then
                    self.busters.spinning.active = not self.busters.spinning.active
                end
                self.busters.hammer.active = false
                self.busters.horizontal_rocket.active = false
                self.busters.vertical_rocket.active = false
                EventBus.send("TRY_ACTIVATE_SPINNING")
                EventBus.send("UPDATED_BUTTONS")
            end
        )
        gui.set_enabled(
            gui.get_node("spinning/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("spinning/icon"),
            true
        )
    end
    if GameStorage.get("hammer_opened") then
        self.druid:new_button(
            "hammer/button",
            function()
                if GameStorage.get("hammer_counts") > 0 then
                    self.busters.hammer.active = not self.busters.hammer.active
                end
                self.busters.horizontal_rocket.active = false
                self.busters.vertical_rocket.active = false
                EventBus.send("UPDATED_BUTTONS")
            end
        )
        gui.set_enabled(
            gui.get_node("hammer/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("hammer/icon"),
            true
        )
    end
    if GameStorage.get("horizontal_rocket_opened") then
        self.druid:new_button(
            "horizontal_rocket/button",
            function()
                if GameStorage.get("horizontal_rocket_counts") > 0 then
                    self.busters.horizontal_rocket.active = not self.busters.horizontal_rocket.active
                end
                self.busters.hammer.active = false
                self.busters.vertical_rocket.active = false
                EventBus.send("UPDATED_BUTTONS")
            end
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/icon"),
            true
        )
    end
    if GameStorage.get("vertical_rocket_opened") then
        self.druid:new_button(
            "vertical_rocket/button",
            function()
                if GameStorage.get("vertical_rocket_counts") > 0 then
                    self.busters.vertical_rocket.active = not self.busters.vertical_rocket.active
                end
                self.busters.hammer.active = false
                self.busters.horizontal_rocket.active = false
                EventBus.send("UPDATED_BUTTONS")
            end
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/icon"),
            true
        )
    end
    if not __TS__ArrayIncludes(
        GAME_CONFIG.animal_levels,
        GameStorage.get("current_level") + 1
    ) then
        gui.set_enabled(
            gui.get_node("buster_buttons"),
            true
        )
    end
    EventBus.on(
        "UPDATED_STEP_COUNTER",
        function(steps)
            set_text("steps", steps)
        end,
        true
    )
    EventBus.on(
        "UPDATED_TARGET",
        function(data)
            repeat
                local ____switch32 = data.id
                local ____cond32 = ____switch32 == 0
                if ____cond32 then
                    set_text("first_target_counts", data.count)
                    break
                end
                ____cond32 = ____cond32 or ____switch32 == 1
                if ____cond32 then
                    set_text("second_target_counts", data.count)
                    break
                end
                ____cond32 = ____cond32 or ____switch32 == 2
                if ____cond32 then
                    set_text("third_target_counts", data.count)
                    break
                end
            until true
        end,
        true
    )
    EventBus.on(
        "UPDATED_BUTTONS",
        function()
            set_text_colors({"spinning/button"}, "#fff", self.busters.spinning.active and 0.5 or 1)
            set_text(
                "spinning/counts",
                GameStorage.get("spinning_counts")
            )
            set_text_colors({"hammer/button"}, "#fff", self.busters.hammer.active and 0.5 or 1)
            set_text(
                "hammer/counts",
                GameStorage.get("hammer_counts")
            )
            set_text_colors({"horizontal_rocket/button"}, "#fff", self.busters.horizontal_rocket.active and 0.5 or 1)
            set_text(
                "horizontal_rocket/counts",
                GameStorage.get("horizontal_rocket_counts")
            )
            set_text_colors({"vertical_rocket/button"}, "#fff", self.busters.vertical_rocket.active and 0.5 or 1)
            set_text(
                "vertical_rocket/counts",
                GameStorage.get("vertical_rocket_counts")
            )
        end,
        true
    )
    EventBus.on(
        "GAME_TIMER",
        function(time)
            set_text(
                "time",
                parse_time(time)
            )
        end,
        true
    )
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    EventBus.off_all_current_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

