local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local __TS__ArrayIsArray = ____lualib.__TS__ArrayIsArray
local ____exports = {}
local setup, setup_info_ui, setup_avatar_or_clock, setup_step_or_time, setup_targets, setup_busters, setup_sustem_ui, setup_win_ui, next_level, setup_gameover_ui, set_animal_tutorial_tip, set_events, update_targets, feed_animation, update_buttons, set_tutorial, remove_tutorial, on_win, set_gameover, set_gameover_offer, disabled_gameover_offer, disable_game_ui, on_shuffle_start, on_shuffle_action, presets, hand_timer
local flow = require("ludobits.m.flow")
local druid = require("druid.druid")
local ____utils = require("utils.utils")
local get_point_curve = ____utils.get_point_curve
local parse_time = ____utils.parse_time
local set_text = ____utils.set_text
local set_text_colors = ____utils.set_text_colors
local ____utils = require("game.utils")
local get_current_level_config = ____utils.get_current_level_config
local is_animal_level = ____utils.is_animal_level
local is_enough_coins = ____utils.is_enough_coins
local remove_coins = ____utils.remove_coins
local remove_lifes = ____utils.remove_lifes
local ____game = require("game.game")
local TargetType = ____game.TargetType
function setup(instance)
    setup_info_ui(instance)
    setup_busters(instance)
    setup_sustem_ui(instance)
    setup_win_ui(instance)
    setup_gameover_ui(instance)
    gui.animate(
        gui.get_node("substrate"),
        "position",
        vmath.vector3(270, 880, 0),
        gui.EASING_INCUBIC,
        0.5
    )
    gui.animate(
        gui.get_node("system_buttons"),
        "position",
        vmath.vector3(0, -40, 0),
        gui.EASING_INCUBIC,
        0.5
    )
end
function setup_info_ui(instance)
    setup_step_or_time(instance)
    setup_avatar_or_clock(instance)
    setup_targets(instance)
end
function setup_avatar_or_clock(instance)
    if __TS__ArrayIncludes(
        GAME_CONFIG.animal_levels,
        GameStorage.get("current_level") + 1
    ) then
        local avatar = gui.get_node("avatar")
        local clock = gui.get_node("clock")
        gui.set_enabled(avatar, false)
        gui.set_enabled(clock, true)
    end
end
function setup_step_or_time(instance)
    if instance.level.time ~= nil then
        local node = gui.get_node("timer")
        gui.set_enabled(node, true)
        set_text(
            "time",
            parse_time(instance.level.time)
        )
        gui.set_text(
            gui.get_node("step_time_box/text"),
            Lang.get_text("time")
        )
    end
    if instance.level.steps ~= nil then
        local node = gui.get_node("step_counter")
        gui.set_enabled(node, true)
        set_text("steps", instance.level.steps)
        gui.set_text(
            gui.get_node("step_time_box/text"),
            Lang.get_text("steps")
        )
    end
end
function setup_targets(instance)
    local targets = instance.level.targets
    do
        local i = 0
        while i < #targets do
            local target = targets[i + 1]
            if target ~= nil then
                local node = gui.get_node(presets.targets[i + 1].node_name)
                gui.set_enabled(node, true)
                gui.set_position(node, presets.targets[i + 1].preset_depend_of_length[#targets].position)
                gui.set_scale(node, presets.targets[i + 1].preset_depend_of_length[#targets].scale)
                local view
                if target.type == TargetType.Cell then
                    view = GAME_CONFIG.cell_view[target.id]
                    if __TS__ArrayIsArray(view) then
                        view = view[1]
                    end
                else
                    view = GAME_CONFIG.element_view[target.id]
                end
                gui.play_flipbook(
                    gui.get_node(presets.targets[i + 1].node_name .. "_icon"),
                    view == "cell_web" and view .. "_ui" or view
                )
                set_text(presets.targets[i + 1].node_name .. "_counts", target.count)
            end
            i = i + 1
        end
    end
    gui.set_text(
        gui.get_node("targets_box/text"),
        Lang.get_text("targets")
    )
end
function setup_busters(instance)
    if __TS__ArrayIncludes(
        GAME_CONFIG.animal_levels,
        GameStorage.get("current_level") + 1
    ) then
        return
    end
    gui.set_enabled(
        gui.get_node("buster_buttons"),
        true
    )
    if GameStorage.get("spinning_opened") then
        instance.druid:new_button(
            "spinning/button",
            function()
                if GameStorage.get("spinning_counts") == 0 then
                    if __TS__ArrayIncludes(
                        GAME_CONFIG.tutorial_levels,
                        GameStorage.get("current_level") + 1
                    ) then
                        if __TS__ArrayIncludes(
                            GameStorage.get("completed_tutorials"),
                            GameStorage.get("current_level") + 1
                        ) then
                            EventBus.send("TRY_BUY_SPINNING")
                        end
                    else
                        EventBus.send("TRY_BUY_SPINNING")
                    end
                    return
                end
                EventBus.send("ACTIVATE_BUSTER", {name = "SPINNING"})
            end
        )
        gui.set_enabled(
            gui.get_node("spinning/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("spinning/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("spinning/counts"),
            true
        )
    end
    if GameStorage.get("hammer_opened") then
        instance.druid:new_button(
            "hammer/button",
            function()
                if GameStorage.get("hammer_counts") == 0 then
                    if __TS__ArrayIncludes(
                        GAME_CONFIG.tutorial_levels,
                        GameStorage.get("current_level") + 1
                    ) then
                        if __TS__ArrayIncludes(
                            GameStorage.get("completed_tutorials"),
                            GameStorage.get("current_level") + 1
                        ) then
                            EventBus.send("TRY_BUY_HAMMER")
                        end
                    else
                        EventBus.send("TRY_BUY_HAMMER")
                    end
                    return
                end
                EventBus.send("ACTIVATE_BUSTER", {name = "HAMMER"})
            end
        )
        gui.set_enabled(
            gui.get_node("hammer/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("hammer/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("hammer/counts"),
            true
        )
    end
    if GameStorage.get("horizontal_rocket_opened") then
        instance.druid:new_button(
            "horizontal_rocket/button",
            function()
                if GameStorage.get("horizontal_rocket_counts") == 0 then
                    if __TS__ArrayIncludes(
                        GAME_CONFIG.tutorial_levels,
                        GameStorage.get("current_level") + 1
                    ) then
                        if __TS__ArrayIncludes(
                            GameStorage.get("completed_tutorials"),
                            GameStorage.get("current_level") + 1
                        ) then
                            EventBus.send("TRY_BUY_HORIZONTAL_ROCKET")
                        end
                    else
                        EventBus.send("TRY_BUY_HORIZONTAL_ROCKET")
                    end
                    return
                end
                EventBus.send("ACTIVATE_BUSTER", {name = "HORIZONTAL_ROCKET"})
            end
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("horizontal_rocket/counts"),
            true
        )
    end
    if GameStorage.get("vertical_rocket_opened") then
        instance.druid:new_button(
            "vertical_rocket/button",
            function()
                if GameStorage.get("vertical_rocket_counts") == 0 then
                    if __TS__ArrayIncludes(
                        GAME_CONFIG.tutorial_levels,
                        GameStorage.get("current_level") + 1
                    ) then
                        if __TS__ArrayIncludes(
                            GameStorage.get("completed_tutorials"),
                            GameStorage.get("current_level") + 1
                        ) then
                            EventBus.send("TRY_BUY_VERTICAL_ROCKET")
                        end
                    else
                        EventBus.send("TRY_BUY_VERTICAL_ROCKET")
                    end
                    return
                end
                EventBus.send("ACTIVATE_BUSTER", {name = "VERTICAL_ROCKET"})
            end
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/lock"),
            false
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/icon"),
            true
        )
        gui.set_enabled(
            gui.get_node("vertical_rocket/counts"),
            true
        )
    end
    update_buttons(instance)
end
function setup_sustem_ui(instance)
    instance.druid:new_button(
        "back/button",
        function()
            Sound.stop("game")
            Scene.load("map")
        end
    )
    instance.druid:new_button(
        "restart/button",
        function()
            GAME_CONFIG.is_restart = true
            Scene.restart()
        end
    )
    instance.druid:new_button(
        "rewind/button",
        function() return EventBus.send("REQUEST_REWIND") end
    )
    set_text(
        "current_level",
        "Уровень " .. tostring(GameStorage.get("current_level") + 1)
    )
end
function setup_win_ui(instance)
    instance.druid:new_button("continue_button", next_level)
    instance.druid:new_button(
        "win_close",
        function()
            Sound.stop("game")
            Scene.load("map")
        end
    )
    gui.set_enabled(
        gui.get_node("win"),
        false
    )
    gui.set_text(
        gui.get_node("win_text"),
        Lang.get_text("win_title")
    )
    gui.set_text(
        gui.get_node("continue_text"),
        Lang.get_text("continue")
    )
end
function next_level()
    GAME_CONFIG.steps_by_ad = 0
    GameStorage.set(
        "current_level",
        GameStorage.get("current_level") + 1
    )
    GAME_CONFIG.is_restart = true
    Scene.restart()
end
function setup_gameover_ui(instance)
    gui.set_text(
        gui.get_node("gameover_text"),
        Lang.get_text("gameover_title")
    )
    gui.set_text(
        gui.get_node("restart_text"),
        Lang.get_text("restart")
    )
    instance.druid:new_button(
        "restart_button",
        function()
            if not GameStorage.get("infinit_life").is_active and GameStorage.get("life").amount == 0 then
                EventBus.send("SET_LIFE_NOTIFICATION")
                return
            end
            GAME_CONFIG.steps_by_ad = 0
            GAME_CONFIG.is_restart = true
            Scene.restart()
        end
    )
    gui.set_text(
        gui.get_node("map_text"),
        Lang.get_text("map")
    )
    instance.druid:new_button(
        "map_button",
        function()
            Sound.stop("game")
            Scene.load("map")
        end
    )
    instance.druid:new_button(
        "gameover_close",
        function()
            Sound.stop("game")
            Scene.load("map")
        end
    )
    instance.druid:new_button("gameover_offer_close", disabled_gameover_offer)
    gui.set_text(
        gui.get_node("steps_by_ad/text"),
        "+3 хода"
    )
    instance.druid:new_button(
        "steps_by_ad/button",
        function()
            GAME_CONFIG.steps_by_ad = GAME_CONFIG.steps_by_ad + 1
            EventBus.send("REVIVE", 3)
        end
    )
    gui.set_text(
        gui.get_node("steps_by_coins/text"),
        "+5 ходов         500"
    )
    instance.druid:new_button(
        "steps_by_coins/button",
        function()
            if not is_enough_coins(500) then
                EventBus.send("REQUEST_OPEN_STORE")
                return
            end
            remove_coins(500)
            EventBus.send("REVIVE", 5)
        end
    )
end
function set_animal_tutorial_tip()
    local window = gui.get_node("window")
    gui.set_enabled(window, true)
end
function set_events(instance)
    EventBus.on("SET_ANIMAL_TUTORIAL_TIP", set_animal_tutorial_tip, true)
    EventBus.on(
        "INIT_UI",
        function() return setup(instance) end
    )
    EventBus.on(
        "UPDATED_STEP_COUNTER",
        function(steps) return set_text("steps", steps) end,
        true
    )
    EventBus.on(
        "UPDATED_TARGET_UI",
        function(data) return update_targets(data) end,
        true
    )
    EventBus.on(
        "UPDATED_BUTTONS",
        function() return update_buttons(instance) end,
        true
    )
    EventBus.on(
        "GAME_TIMER",
        function(time) return set_text(
            "time",
            parse_time(time)
        ) end,
        true
    )
    EventBus.on("SET_TUTORIAL", set_tutorial, true)
    EventBus.on("REMOVE_TUTORIAL", remove_tutorial, true)
    EventBus.on("ON_WIN", on_win)
    EventBus.on(
        "ON_GAME_OVER",
        function(data)
            timer.delay(
                GAME_CONFIG.delay_before_gameover,
                false,
                function()
                    set_gameover(instance, data.state, data.revive)
                end
            )
        end,
        true
    )
    EventBus.on("SHUFFLE_START", on_shuffle_start)
    EventBus.on("SHUFFLE_ACTION", on_shuffle_action)
end
function update_targets(data)
    repeat
        local ____switch72 = data.idx
        local ____cond72 = ____switch72 == 0
        if ____cond72 then
            set_text(
                "first_target_counts",
                math.max(0, data.amount)
            )
            break
        end
        ____cond72 = ____cond72 or ____switch72 == 1
        if ____cond72 then
            set_text(
                "second_target_counts",
                math.max(0, data.amount)
            )
            break
        end
        ____cond72 = ____cond72 or ____switch72 == 2
        if ____cond72 then
            set_text(
                "third_target_counts",
                math.max(0, data.amount)
            )
            break
        end
    until true
end
function feed_animation()
    local level_config = get_current_level_config()
    local item_id = 0
    for ____, target in ipairs(level_config.targets) do
        if target.type == TargetType.Element and __TS__ArrayIncludes(GAME_CONFIG.feed_elements, target.id) then
            item_id = target.id
        end
    end
    do
        local i = 0
        while i < 5 do
            timer.delay(
                0.05 * i,
                false,
                function()
                    flow.start(function()
                        local element = gui.new_box_node(
                            vmath.vector3(420, 870, 0),
                            vmath.vector3(40, 40, 1)
                        )
                        local view = GAME_CONFIG.element_view[item_id]
                        gui.set_texture(element, "graphics")
                        gui.play_flipbook(element, view)
                        local ltrb = Camera.get_ltrb()
                        local width = 540
                        local height = math.abs(ltrb.w)
                        local points = {{x = 420, y = 870}, {x = width * 0.3, y = height * 0.5}, {x = width * 0.5, y = height * 0.4}}
                        local result = vmath.vector3()
                        do
                            local i = 0
                            while i < 100 do
                                local p = get_point_curve(i / 100, points, result)
                                gui.animate(
                                    element,
                                    gui.PROP_POSITION,
                                    p,
                                    gui.EASING_LINEAR,
                                    0.01
                                )
                                flow.delay(0.01)
                                i = i + 1
                            end
                        end
                        local scale = gui.get_scale(element)
                        scale.x = scale.x * 2
                        scale.y = scale.y * 2
                        gui.animate(
                            element,
                            gui.PROP_SCALE,
                            scale,
                            gui.EASING_INCUBIC,
                            0.5,
                            0,
                            function()
                                timer.delay(
                                    2,
                                    false,
                                    function()
                                        gui.delete_node(element)
                                    end
                                )
                            end
                        )
                    end)
                end
            )
            i = i + 1
        end
    end
end
function update_buttons(instance)
    local spinning = GameStorage.get("spinning_counts")
    set_text("spinning/counts", spinning == 0 and "+" or spinning)
    set_text_colors({"spinning/button"}, "#fff", instance.busters.spinning.active and 0.5 or 1)
    local hammer = GameStorage.get("hammer_counts")
    set_text("hammer/counts", hammer == 0 and "+" or hammer)
    set_text_colors({"hammer/button"}, "#fff", instance.busters.hammer.active and 0.5 or 1)
    local horizontal_rocket = GameStorage.get("horizontal_rocket_counts")
    set_text("horizontal_rocket/counts", horizontal_rocket == 0 and "+" or horizontal_rocket)
    set_text_colors({"horizontal_rocket/button"}, "#fff", instance.busters.horizontal_rocket.active and 0.5 or 1)
    local vertical_rocket = GameStorage.get("vertical_rocket_counts")
    set_text("vertical_rocket/counts", vertical_rocket == 0 and "+" or vertical_rocket)
    set_text_colors({"vertical_rocket/button"}, "#fff", instance.busters.vertical_rocket.active and 0.5 or 1)
end
function set_tutorial()
    local tutorial_data = GAME_CONFIG.tutorials_data[GameStorage.get("current_level") + 1]
    local tutorial = gui.get_node("tutorial")
    local tutorial_text = gui.get_node("tutorial_text")
    gui.set_position(tutorial_text, tutorial_data.text.pos)
    gui.set_text(
        tutorial_text,
        Lang.get_text(tutorial_data.text.data)
    )
    gui.set_enabled(tutorial, true)
    gui.set_enabled(
        gui.get_node("lock1"),
        true
    )
    if tutorial_data.arrow_pos ~= nil then
        local arrow = gui.get_node("arrow")
        gui.set_enabled(arrow, true)
        gui.set_position(arrow, tutorial_data.arrow_pos)
    end
    if tutorial_data.buster_icon ~= nil then
        local buster = gui.get_node("buster")
        local buster_icon = gui.get_node("buster_icon")
        gui.set_enabled(buster, true)
        gui.set_position(buster, tutorial_data.buster_icon.pos)
        gui.play_flipbook(buster_icon, tutorial_data.buster_icon.icon)
    end
    if tutorial_data.busters ~= nil then
        local busters = __TS__ArrayIsArray(tutorial_data.busters) and tutorial_data.busters or ({tutorial_data.busters})
        for ____, buster in ipairs(busters) do
            gui.set_layer(
                gui.get_node(buster .. "/button"),
                "top"
            )
        end
        if __TS__ArrayIncludes(busters, "spinning") then
            local hand = gui.get_node("hand")
            hand_timer = timer.delay(
                4,
                true,
                function()
                    gui.set_position(
                        hand,
                        vmath.vector3(-170, -350, 0)
                    )
                    gui.set_enabled(hand, true)
                    gui.animate(
                        hand,
                        gui.PROP_SCALE,
                        vmath.vector3(0.7, 0.7, 0.7),
                        gui.EASING_INCUBIC,
                        0.5,
                        0,
                        function()
                            gui.set_enabled(hand, false)
                        end,
                        gui.PLAYBACK_ONCE_PINGPONG
                    )
                end
            )
        end
        if __TS__ArrayIncludes(busters, "hammer") then
            local hand = gui.get_node("hand")
            hand_timer = timer.delay(
                4,
                true,
                function()
                    gui.set_position(
                        hand,
                        vmath.vector3(-60, -350, 0)
                    )
                    gui.set_enabled(hand, true)
                    gui.animate(
                        hand,
                        gui.PROP_SCALE,
                        vmath.vector3(0.7, 0.7, 0.7),
                        gui.EASING_INCUBIC,
                        0.5,
                        0,
                        function()
                            gui.animate(
                                hand,
                                gui.PROP_POSITION,
                                vmath.vector3(70, 70, 0),
                                gui.EASING_INCUBIC,
                                1,
                                0,
                                function()
                                    gui.animate(
                                        hand,
                                        gui.PROP_SCALE,
                                        vmath.vector3(0.7, 0.7, 0.7),
                                        gui.EASING_INCUBIC,
                                        0.5,
                                        0,
                                        function()
                                            gui.set_enabled(hand, false)
                                        end,
                                        gui.PLAYBACK_ONCE_PINGPONG
                                    )
                                end
                            )
                        end,
                        gui.PLAYBACK_ONCE_PINGPONG
                    )
                end
            )
        end
        if __TS__ArrayIncludes(busters, "horizontal_rocket") then
            local hand = gui.get_node("hand")
            hand_timer = timer.delay(
                4,
                true,
                function()
                    gui.set_position(
                        hand,
                        vmath.vector3(50, -350, 0)
                    )
                    gui.set_enabled(hand, true)
                    gui.animate(
                        hand,
                        gui.PROP_SCALE,
                        vmath.vector3(0.7, 0.7, 0.7),
                        gui.EASING_INCUBIC,
                        0.5,
                        0,
                        function()
                            gui.animate(
                                hand,
                                gui.PROP_POSITION,
                                vmath.vector3(-100, 20, 0),
                                gui.EASING_INCUBIC,
                                1,
                                0,
                                function()
                                    gui.animate(
                                        hand,
                                        gui.PROP_SCALE,
                                        vmath.vector3(0.7, 0.7, 0.7),
                                        gui.EASING_INCUBIC,
                                        0.5,
                                        0,
                                        function()
                                            gui.set_enabled(hand, false)
                                        end,
                                        gui.PLAYBACK_ONCE_PINGPONG
                                    )
                                end
                            )
                        end,
                        gui.PLAYBACK_ONCE_PINGPONG
                    )
                end
            )
        end
    end
end
function remove_tutorial()
    if hand_timer ~= nil then
        timer.cancel(hand_timer)
    end
    gui.set_enabled(
        gui.get_node("lock1"),
        false
    )
    gui.set_enabled(
        gui.get_node("tutorial"),
        false
    )
end
function on_win()
    if is_animal_level() then
        feed_animation()
    end
    timer.delay(
        is_animal_level() and GAME_CONFIG.animal_level_delay_before_win or GAME_CONFIG.delay_before_win,
        false,
        function()
            disable_game_ui()
            local lock = gui.get_node("lock1")
            gui.set_enabled(lock, true)
            gui.animate(
                lock,
                gui.PROP_COLOR,
                vmath.vector4(0, 0, 0, GAME_CONFIG.fade_value),
                gui.EASING_INCUBIC,
                0.3,
                0,
                function()
                    gui.set_enabled(
                        gui.get_node("win"),
                        true
                    )
                    local coins = get_current_level_config().coins
                    if coins > 0 then
                        gui.set_enabled(
                            gui.get_node("reward"),
                            true
                        )
                        gui.set_text(
                            gui.get_node("coins_count"),
                            tostring(coins)
                        )
                    end
                end
            )
            Sound.play("passed")
            local anim_props = {blend_duration = 0, playback_rate = 1}
            gui.play_spine_anim(
                gui.get_node("firework"),
                hash("firework"),
                gui.PLAYBACK_LOOP_FORWARD,
                anim_props
            )
        end
    )
end
function set_gameover(instance, state, revive)
    disable_game_ui()
    local lock = gui.get_node("lock1")
    gui.set_enabled(lock, true)
    gui.animate(
        lock,
        gui.PROP_COLOR,
        vmath.vector4(0, 0, 0, GAME_CONFIG.fade_value),
        gui.EASING_INCUBIC,
        0.3,
        0,
        function()
            gui.set_enabled(
                gui.get_node("gameover"),
                true
            )
            gui.set_enabled(
                gui.get_node("missing_targets"),
                true
            )
        end
    )
    Sound.play("failed")
    local target_1 = gui.get_node("target_1")
    local target_2 = gui.get_node("target_2")
    local target_3 = gui.get_node("target_3")
    if #state.targets == 1 then
        local target1 = state.targets[1]
        local view1 = ""
        if target1.type == TargetType.Cell then
            if __TS__ArrayIsArray(GAME_CONFIG.cell_view[target1.id]) then
                view1 = GAME_CONFIG.cell_view[target1.id][1]
            else
                view1 = GAME_CONFIG.cell_view[target1.id]
            end
        else
            view1 = GAME_CONFIG.element_view[target1.id]
        end
        gui.play_flipbook(
            gui.get_node("target_1"),
            view1 == "cell_web" and view1 .. "_ui" or view1
        )
        gui.set_text(
            gui.get_node("target_1_text"),
            tostring((tostring(math.min(#target1.uids, target1.count)) .. "/") .. tostring(target1.count))
        )
        gui.set_enabled(
            gui.get_node("target_1_fail_icon"),
            #target1.uids < target1.count
        )
        gui.set_position(
            target_1,
            vmath.vector3(0, 0, 0)
        )
        gui.set_enabled(target_1, true)
    elseif #state.targets == 2 then
        local target1 = state.targets[1]
        local view1 = ""
        if target1.type == TargetType.Cell then
            if __TS__ArrayIsArray(GAME_CONFIG.cell_view[target1.id]) then
                view1 = GAME_CONFIG.cell_view[target1.id][1]
            else
                view1 = GAME_CONFIG.cell_view[target1.id]
            end
        else
            view1 = GAME_CONFIG.element_view[target1.id]
        end
        gui.play_flipbook(
            gui.get_node("target_1"),
            view1 == "cell_web" and view1 .. "_ui" or view1
        )
        gui.set_text(
            gui.get_node("target_1_text"),
            tostring((tostring(math.min(#target1.uids, target1.count)) .. "/") .. tostring(target1.count))
        )
        gui.set_enabled(
            gui.get_node("target_1_fail_icon"),
            #target1.uids < target1.count
        )
        gui.set_position(
            target_1,
            vmath.vector3(-70, 0, 0)
        )
        gui.set_enabled(target_1, true)
        local target2 = state.targets[2]
        local view2 = ""
        if target2.type == TargetType.Cell then
            if __TS__ArrayIsArray(GAME_CONFIG.cell_view[target2.id]) then
                view2 = GAME_CONFIG.cell_view[target2.id][1]
            else
                view2 = GAME_CONFIG.cell_view[target2.id]
            end
        else
            view2 = GAME_CONFIG.element_view[target2.id]
        end
        gui.play_flipbook(
            gui.get_node("target_2"),
            view2 == "cell_web" and view2 .. "_ui" or view2
        )
        gui.set_text(
            gui.get_node("target_2_text"),
            tostring((tostring(math.min(#target2.uids, target2.count)) .. "/") .. tostring(target2.count))
        )
        gui.set_enabled(
            gui.get_node("target_2_fail_icon"),
            #target2.uids < target2.count
        )
        gui.set_position(
            target_2,
            vmath.vector3(70, 0, 0)
        )
        gui.set_enabled(target_2, true)
    elseif #state.targets == 3 then
        local target1 = state.targets[1]
        local view1 = ""
        if target1.type == TargetType.Cell then
            if __TS__ArrayIsArray(GAME_CONFIG.cell_view[target1.id]) then
                view1 = GAME_CONFIG.cell_view[target1.id][1]
            else
                view1 = GAME_CONFIG.cell_view[target1.id]
            end
        else
            view1 = GAME_CONFIG.element_view[target1.id]
        end
        gui.play_flipbook(
            gui.get_node("target_1"),
            view1 == "cell_web" and view1 .. "_ui" or view1
        )
        gui.set_text(
            gui.get_node("target_1_text"),
            tostring((tostring(math.min(#target1.uids, target1.count)) .. "/") .. tostring(target1.count))
        )
        gui.set_enabled(
            gui.get_node("target_1_fail_icon"),
            #target1.uids < target1.count
        )
        gui.set_position(
            target_1,
            vmath.vector3(-125, 0, 0)
        )
        gui.set_enabled(target_1, true)
        local target2 = state.targets[2]
        local view2 = ""
        if target2.type == TargetType.Cell then
            if __TS__ArrayIsArray(GAME_CONFIG.cell_view[target2.id]) then
                view2 = GAME_CONFIG.cell_view[target2.id][1]
            else
                view2 = GAME_CONFIG.cell_view[target2.id]
            end
        else
            view2 = GAME_CONFIG.element_view[target2.id]
        end
        gui.play_flipbook(
            gui.get_node("target_2"),
            view2 == "cell_web" and view2 .. "_ui" or view2
        )
        gui.set_text(
            gui.get_node("target_2_text"),
            tostring((tostring(math.min(#target2.uids, target2.count)) .. "/") .. tostring(target2.count))
        )
        gui.set_enabled(
            gui.get_node("target_2_fail_icon"),
            #target2.uids < target2.count
        )
        gui.set_position(
            target_2,
            vmath.vector3(0, 0, 0)
        )
        gui.set_enabled(target_2, true)
        local target3 = state.targets[3]
        local view3 = ""
        if target3.type == TargetType.Cell then
            if __TS__ArrayIsArray(GAME_CONFIG.cell_view[target3.id]) then
                view3 = GAME_CONFIG.cell_view[target3.id][1]
            else
                view3 = GAME_CONFIG.cell_view[target3.id]
            end
        else
            view3 = GAME_CONFIG.element_view[target3.id]
        end
        gui.play_flipbook(
            gui.get_node("target_3"),
            view3 == "cell_web" and view3 .. "_ui" or view3
        )
        gui.set_text(
            gui.get_node("target_3_text"),
            tostring((tostring(math.min(#target3.uids, target3.count)) .. "/") .. tostring(target3.count))
        )
        gui.set_enabled(
            gui.get_node("target_3_fail_icon"),
            #target3.uids < target3.count
        )
        gui.set_position(
            target_3,
            vmath.vector3(125, 0, 0)
        )
        gui.set_enabled(target_3, true)
    end
    if revive then
        set_gameover_offer()
    else
        disabled_gameover_offer()
    end
end
function set_gameover_offer()
    gui.set_enabled(
        gui.get_node("gameover_offer_close"),
        true
    )
    if GAME_CONFIG.steps_by_ad < 2 then
        gui.set_enabled(
            gui.get_node("steps_by_ad/button"),
            true
        )
    end
    gui.set_enabled(
        gui.get_node("steps_by_coins/button"),
        true
    )
end
function disabled_gameover_offer()
    remove_lifes(1)
    gui.set_enabled(
        gui.get_node("gameover_offer_close"),
        false
    )
    gui.set_enabled(
        gui.get_node("steps_by_ad/button"),
        false
    )
    gui.set_enabled(
        gui.get_node("steps_by_coins/button"),
        false
    )
    gui.set_enabled(
        gui.get_node("gameover_close"),
        true
    )
    gui.set_enabled(
        gui.get_node("restart_button"),
        true
    )
    gui.set_enabled(
        gui.get_node("map_button"),
        true
    )
end
function disable_game_ui()
    gui.set_enabled(
        gui.get_node("substrate"),
        false
    )
    gui.set_enabled(
        gui.get_node("buster_buttons"),
        false
    )
    gui.set_enabled(
        gui.get_node("system_buttons"),
        false
    )
end
function on_shuffle_start()
    local shuffle = gui.get_node("shuffle")
    local lock = gui.get_node("lock1")
    gui.set_enabled(lock, true)
    gui.animate(
        lock,
        gui.PROP_COLOR,
        vmath.vector4(0, 0, 0, GAME_CONFIG.fade_value),
        gui.EASING_INCUBIC,
        0.3,
        0,
        function()
            gui.set_enabled(shuffle, true)
        end
    )
end
function on_shuffle_action()
    timer.delay(
        0.7,
        false,
        function()
            local shuffle = gui.get_node("shuffle")
            local lock = gui.get_node("lock1")
            gui.set_enabled(shuffle, false)
            gui.animate(
                lock,
                gui.PROP_COLOR,
                vmath.vector4(),
                gui.EASING_INCUBIC,
                0.3,
                0,
                function()
                    gui.set_enabled(lock, false)
                end
            )
        end
    )
end
presets = {targets = {
    {
        node_name = "first_target",
        preset_depend_of_length = {
            [1] = {
                position = vmath.vector3(0, 0, 0),
                scale = vmath.vector3(0.5, 0.5, 1)
            },
            [2] = {
                position = vmath.vector3(-40, 0, 0),
                scale = vmath.vector3(0.5, 0.5, 1)
            },
            [3] = {
                position = vmath.vector3(-35, 20, 0),
                scale = vmath.vector3(0.4, 0.4, 1)
            }
        }
    },
    {
        node_name = "second_target",
        preset_depend_of_length = {
            [2] = {
                position = vmath.vector3(40, 0, 0),
                scale = vmath.vector3(0.5, 0.5, 1)
            },
            [3] = {
                position = vmath.vector3(35, 20, 0),
                scale = vmath.vector3(0.4, 0.4, 1)
            }
        }
    },
    {
        node_name = "third_target",
        preset_depend_of_length = {[3] = {
            position = vmath.vector3(0, -35, 0),
            scale = vmath.vector3(0.4, 0.4, 1)
        }}
    }
}}
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    self.level = GAME_CONFIG.levels[GameStorage.get("current_level") + 1]
    self.busters = self.level.busters
    self.druid:new_button(
        "btn",
        function()
            local window = gui.get_node("window")
            gui.set_enabled(window, false)
            EventBus.send("HIDED_ANIMAL_TUTORIAL_TIP")
        end
    )
    set_events(self)
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    Manager.final_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

