local ____exports = {}
local set_events, on_resize
local druid = require("druid.druid")
local ____utils = require("game.utils")
local is_animal_level = ____utils.is_animal_level
function set_events(data)
    EventBus.on("SYS_ON_RESIZED", on_resize, false)
end
function on_resize(data)
    local bg = gui.get_node("bg")
    print("DATA: ", data.width, data.height)
    local dr = data.width / data.height
    local br = 1920 / 1080
    if dr < br then
        gui.set_pivot(bg, gui.PIVOT_W)
        gui.set_xanchor(bg, gui.ANCHOR_LEFT)
        gui.set_position(
            bg,
            vmath.vector3(0, 444, 0)
        )
        gui.set_scale(
            bg,
            vmath.vector3(1, 1, 1)
        )
    else
        gui.set_pivot(bg, gui.PIVOT_CENTER)
        gui.set_xanchor(bg, gui.ANCHOR_NONE)
        gui.set_position(
            bg,
            vmath.vector3(280, 444, 0)
        )
        local delta = dr - br
        print(delta)
        local scale = math.min(1 + delta, 1.5)
        gui.set_scale(
            bg,
            vmath.vector3(scale, scale, 1)
        )
    end
    local hill = gui.get_node("hill")
    gui.set_enabled(
        hill,
        is_animal_level()
    )
    local posY = -275 + GAME_CONFIG.bottom_offset
    if GAME_CONFIG.debug_levels then
        posY = posY + 100
    end
    gui.set_position(
        hill,
        vmath.vector3(250, posY, 0)
    )
end
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    set_events(self)
    Camera.update_window_size()
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    EventBus.off_all_current_script()
    Manager.final_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

