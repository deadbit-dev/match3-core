local ____exports = {}
local animal_init, start_action, walk, idle, walk_to, action, walk_back
local ____utils = require("game.utils")
local get_current_level = ____utils.get_current_level
local is_tutorial = ____utils.is_tutorial
function animal_init()
    if GAME_CONFIG.animal_offset then
        local pos = go.get_position()
        pos.y = pos.y + 100
        go.set_position(pos)
    end
    idle()
end
function start_action(props, options)
    if options.walkable then
        local ____props_timers_0 = props.timers
        ____props_timers_0[#____props_timers_0 + 1] = timer.delay(
            math.random(5, 10),
            false,
            walk
        )
    else
        local ____props_timers_2 = props.timers
        ____props_timers_2[#____props_timers_2 + 1] = timer.delay(
            math.random(5, 10),
            false,
            function()
                action(function()
                    idle()
                    local ____props_timers_1 = props.timers
                    ____props_timers_1[#____props_timers_1 + 1] = timer.delay(
                        math.random(5, 10),
                        false,
                        function()
                            action(function()
                                idle()
                            end)
                        end
                    )
                end)
            end
        )
    end
end
function walk()
    local to_pos = go.get_position()
    to_pos.x = to_pos.x - 70
    walk_to(
        to_pos,
        function()
            action(function()
                local back_pos = go.get_position()
                back_pos.x = back_pos.x + 70
                walk_back(
                    back_pos,
                    function()
                        idle()
                        timer.delay(
                            math.random(5, 10),
                            false,
                            walk
                        )
                    end
                )
            end)
        end
    )
end
function idle()
    local anim_props = {blend_duration = 0.1, playback_rate = 1}
    spine.play_anim(
        "#spinemodel",
        "idle",
        go.PLAYBACK_LOOP_FORWARD,
        anim_props,
        function(____self, message_id, message, sender)
            if message_id == hash("spine_animation_done") then
                local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
                if name == "kozel" then
                    timer.delay(
                        3.25,
                        false,
                        function()
                            Sound.play(name)
                        end
                    )
                end
            end
        end
    )
    local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
    if name == "kozel" then
        timer.delay(
            3.25,
            false,
            function()
                Sound.play(name)
            end
        )
    end
end
function walk_to(pos, callback)
    local anim_props = {blend_duration = 0.5, playback_rate = 1}
    spine.play_anim("#spinemodel", "walk", go.PLAYBACK_ONCE_FORWARD, anim_props)
    go.animate(
        go.get_id(),
        "position",
        go.PLAYBACK_ONCE_FORWARD,
        pos,
        go.EASING_LINEAR,
        1,
        0,
        function()
            if callback ~= nil then
                callback()
            end
        end
    )
end
function action(callback)
    local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
    if name ~= "kozel" then
        Sound.play(name)
    end
    local anim_props = {blend_duration = 0.3, playback_rate = 1}
    spine.play_anim(
        "#spinemodel",
        "action",
        go.PLAYBACK_ONCE_FORWARD,
        anim_props,
        function(____self, message_id, message, sender)
            if message_id == hash("spine_animation_done") and callback ~= nil then
                callback()
            end
        end
    )
end
function walk_back(pos, callback)
    local anim_props = {blend_duration = 0.5, playback_rate = 1}
    spine.play_anim("#spinemodel", "walk_back", go.PLAYBACK_ONCE_FORWARD, anim_props)
    go.animate(
        go.get_id(),
        "position",
        go.PLAYBACK_ONCE_FORWARD,
        pos,
        go.EASING_LINEAR,
        1,
        0,
        function()
            if callback ~= nil then
                callback()
            end
        end
    )
end
go.property("walkable", true)
function ____exports.init(self)
    Manager.init_script()
    self.timers = {}
    EventBus.on(
        "ON_WIN",
        function()
            for ____, t in ipairs(self.timers) do
                timer.cancel(t)
            end
            idle()
        end
    )
    if is_tutorial() then
        EventBus.on(
            "HIDED_ANIMAL_TUTORIAL_TIP",
            function()
                start_action(self, {walkable = self.walkable})
            end
        )
    else
        start_action(self, {walkable = self.walkable})
    end
    animal_init()
end
function ____exports.final()
    EventBus.off_all_current_script()
    Manager.final_script()
end
init = ____exports.init
final = ____exports.final

