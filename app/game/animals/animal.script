local ____exports = {}
local animal_init, start_action, walk, idle, walk_to, action, walk_back
local ____utils = require("game.utils")
local get_current_level = ____utils.get_current_level
local is_tutorial = ____utils.is_tutorial
function animal_init()
    local pos = go.get_position()
    pos.y = pos.y + GAME_CONFIG.bottom_offset
    if GAME_CONFIG.debug_levels then
        pos.y = pos.y + 125
    end
    go.set_position(pos)
    idle()
end
function start_action(props, options)
    if options.walkable then
        local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
        timer.delay(
            math.random(5, name == "kozel" and 6 or 10),
            false,
            function()
                if props.is_win then
                    return
                end
                walk(props)
            end
        )
    else
        timer.delay(
            math.random(5, 10),
            false,
            function()
                if props.is_win then
                    return
                end
                action(function()
                    idle()
                    start_action(props, options)
                end)
            end
        )
    end
end
function walk(props)
    if props.is_win then
        return
    end
    local to_pos = go.get_position()
    to_pos.x = to_pos.x - 70
    walk_to(
        to_pos,
        function()
            if props.is_win then
                return
            end
            action(function()
                if props.is_win then
                    return
                end
                local back_pos = go.get_position()
                back_pos.x = back_pos.x + 70
                walk_back(
                    back_pos,
                    function()
                        idle()
                        if props.is_win then
                            return
                        end
                        local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
                        timer.delay(
                            math.random(5, name == "kozel" and 6 or 10),
                            false,
                            walk
                        )
                    end
                )
            end)
        end
    )
end
function idle()
    local anim_props = {blend_duration = 0.1, playback_rate = 1}
    spine.play_anim(
        "#spinemodel",
        "idle",
        go.PLAYBACK_LOOP_FORWARD,
        anim_props,
        function(____self, message_id, message, sender)
            if message_id == hash("spine_animation_done") then
                idle()
            end
        end
    )
    local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
    if name == "kozel" then
        timer.delay(
            3.25,
            false,
            function()
                Sound.play(name)
                timer.delay(
                    2,
                    false,
                    function()
                        Sound.play("cat")
                    end
                )
            end
        )
    end
end
function walk_to(pos, callback)
    local anim_props = {blend_duration = 0.5, playback_rate = 1}
    spine.play_anim("#spinemodel", "walk", go.PLAYBACK_ONCE_FORWARD, anim_props)
    go.animate(
        go.get_id(),
        "position",
        go.PLAYBACK_ONCE_FORWARD,
        pos,
        go.EASING_LINEAR,
        1,
        0,
        function()
            if callback ~= nil then
                callback()
            end
        end
    )
end
function action(callback)
    local name = GAME_CONFIG.level_to_animal[get_current_level() + 1]
    Sound.play(name)
    timer.delay(
        2,
        false,
        function()
            Sound.play("cat")
        end
    )
    local anim_props = {blend_duration = 0.3, playback_rate = 1}
    spine.play_anim(
        "#spinemodel",
        "action",
        go.PLAYBACK_ONCE_FORWARD,
        anim_props,
        function(____self, message_id, message, sender)
            if message_id == hash("spine_animation_done") and callback ~= nil then
                callback()
            end
        end
    )
end
function walk_back(pos, callback)
    local anim_props = {blend_duration = 0.5, playback_rate = 1}
    spine.play_anim("#spinemodel", "walk_back", go.PLAYBACK_ONCE_FORWARD, anim_props)
    go.animate(
        go.get_id(),
        "position",
        go.PLAYBACK_ONCE_FORWARD,
        pos,
        go.EASING_LINEAR,
        1,
        0,
        function()
            if callback ~= nil then
                callback()
            end
        end
    )
end
go.property("cat", false)
go.property("walkable", true)
function ____exports.init(self)
    Manager.init_script()
    if self.cat then
        animal_init()
        return
    end
    EventBus.on(
        "ON_WIN",
        function()
            self.is_win = true
            if self.walkable then
                if go.get(
                    msg.url(nil, nil, "spinemodel"),
                    "animation"
                ) ~= hash("idle") then
                    local back_pos = go.get_position()
                    back_pos.x = back_pos.x + 70
                    walk_back(back_pos, idle)
                end
            end
        end,
        false
    )
    if is_tutorial() then
        EventBus.on(
            "HIDED_ANIMAL_TUTORIAL_TIP",
            function()
                start_action(self, {walkable = self.walkable})
            end,
            false
        )
    else
        start_action(self, {walkable = self.walkable})
    end
    animal_init()
end
function ____exports.final()
    EventBus.off_all_current_script()
    Manager.final_script()
end
init = ____exports.init
final = ____exports.final

