local ____exports = {}
local set_level_buttons, load_level, set_last_map_position, set_completed_levels, on_drag, set_events, on_resize, get_offset
local druid = require("druid.druid")
local ____game_config = require("main.game_config")
local Dlg = ____game_config.Dlg
function set_level_buttons(data)
    do
        local i = 0
        while i < 47 do
            data.druid:new_button(
                tostring(i + 1) .. "/level",
                function(____self, params)
                    load_level(params)
                end,
                i
            )
            i = i + 1
        end
    end
end
function load_level(level)
    if not GameStorage.get("infinit_life").is_active and GameStorage.get("life").amount == 0 then
        return EventBus.send("NOT_ENOUGH_LIFE")
    end
    GAME_CONFIG.steps_by_ad = 0
    GameStorage.set("current_level", level)
    Sound.stop("map")
    Scene.load("game")
end
function set_last_map_position()
    local map = gui.get_node("map")
    local pos = gui.get_position(map)
    pos.y = GameStorage.get("map_last_pos_y")
    gui.set_position(map, pos)
end
function set_completed_levels()
    for ____, level in ipairs(GameStorage.get("completed_levels")) do
        local level_node = gui.get_node(tostring(level + 1) .. "/level")
        gui.set_texture(level_node, "map")
        gui.play_flipbook(level_node, "button_level_green")
    end
end
function on_drag(action)
    if math.abs(action.dy) == 0 then
        return
    end
    local map = gui.get_node("map")
    local pos = gui.get_position(map)
    local offset = get_offset()
    pos.y = math.max(
        -3990 + offset,
        math.min(0 - offset, pos.y + action.dy)
    )
    gui.set_position(map, pos)
    GameStorage.set("map_last_pos_y", pos.y)
end
function set_events(instace)
    EventBus.on(
        "OPENED_DLG",
        function(dlg)
            instace.block_input = true
            if dlg == Dlg.Store then
                Sound.stop("map")
            end
        end
    )
    EventBus.on(
        "CLOSED_DLG",
        function(dlg)
            instace.block_input = false
            if dlg == Dlg.Store then
                Sound.play("map")
            end
        end
    )
    EventBus.on(
        "LIFE_NOTIFICATION",
        function(state)
            instace.block_input = state
        end
    )
    EventBus.on("SYS_ON_RESIZED", on_resize)
end
function on_resize(data)
    Log.log("RESIZE")
    local offset = get_offset()
    local map = gui.get_node("map")
    local pos = gui.get_position(map)
    pos.y = math.max(
        -3990 + offset,
        math.min(0 - offset, pos.y)
    )
    gui.set_position(map, pos)
end
function get_offset()
    local height = Camera.get_ltrb().w
    if height >= -480 then
        return 0
    end
    return math.abs(480 - math.abs(height))
end
function ____exports.init(self)
    Manager.init_script()
    self.druid = druid.new(self)
    Camera.set_dynamic_orientation(false)
    Camera.set_go_prjection(-1, 0, -3, 3)
    set_last_map_position()
    set_completed_levels()
    set_level_buttons(self)
    set_events(self)
    Sound.play("map")
    Scene.load_resource("map", "shared_gui")
end
function ____exports.on_input(self, action_id, action)
    if GAME_CONFIG.is_busy_input or self.block_input then
        return
    end
    self.druid:on_input(action_id, action)
    if action_id == ID_MESSAGES.MSG_TOUCH and not action.pressed and not action.released then
        on_drag(action)
    end
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    Manager.on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    self.druid:final()
    Scene.unload_all_resources("map", {"shared_gui"})
    Manager.final_script()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

